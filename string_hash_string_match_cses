#include <bits/stdc++.h>
using namespace std;
#define int long long int
const int p1 = 137,mod1 = 127657753,  p2 = 277,mod2 = 987654319,N = 1e6 + 9;
int fermat(int base, int exp, int mod) {
    int ans = 1; 
    base = (base + mod) % mod;
    while(exp > 0) {
        if(exp & 1) {
            ans  = (ans * base) % mod;
        }
        base = (base* base) % mod;
        exp /=2;
    }
    return ans;
}
int ip1,ip2;
pair<int,int>pw[N],ipw[N];
// calculate pw and ipw
void prec() {
    pw[0] = {1,1};
    for(int i = 1; i < N; i++) {
        pw[i].first =  pw[i-1].first * p1 % mod1;
        pw[i].second =  pw[i-1].second * p2 % mod2;
    }
    ip1 = fermat(p1,mod1 - 2,mod1);
    ip2 = fermat(p2,mod2 - 2,mod2);
    ipw[0] = {1,1};
    for(int i = 1; i < N; i++) {
        ipw[i].first =  ipw[i-1].first * ip1 % mod1;
        ipw[i].second =  ipw[i-1].second * ip2 % mod2;
    }
}
// full string hash
pair<int,int>string_hash(string s) {
    int n = s.size();
    pair<int,int>hs({0,0});
    for(int i = 0; i < n; i++) {
        hs.first +=  s[i]*pw[i].first % mod1;
        hs.first %= mod1;
        hs.second +=  s[i] * pw[i].second % mod2;
        hs.second %= mod2;
    }
 return  hs;
}
// pre_hash_build
pair<int,int>pref[N];
void build(string s) {
    int n = s.size();
    for(int i = 0; i< n; i++) {
        pref[i].first = s[i]*pw[i].first % mod1;
        if(i != 0) {
            pref[i].first = (pref[i].first + pref[i-1].first + mod1)%mod1;
        }
        pref[i].second = s[i]*pw[i].second % mod2;
        if(i != 0) {
            pref[i].second = (pref[i].second + pref[i-1].second + mod2)%mod2;
        }
    }
}
//get_hash_0(1)
pair<int,int>get_hash(int i, int j) {
    assert(i <= j);
    pair<int,int>hs({0,0});
    hs.first = pref[j].first;
    if(i != 0) {
        hs.first = (hs.first - pref[i-1].first + mod1)%mod1;
    }
    hs.first = hs.first *  ipw[i].first % mod1;
    hs.second = pref[j].second;
    if(i != 0) {
        hs.second = (hs.second - pref[i-1].second + mod2)%mod2;
    }
    hs.second = hs.second *  ipw[i].second % mod2;
    return hs;
}
//lcp
int lcp(int i, int j,int x, int y) {
    int l = 1, r = min(j-i+1,y-x+1),ans = 0;
    while(l <= r) {
        int mid = (l+r)/2;
        if(get_hash(i,i+mid) == get_hash(x,x+mid-1)) {
            ans = mid;
            l = mid+1;
        } else {
            r = mid-1;
        }
    }
    return ans;
}
string s;
// campare string
/*
0 == equal
-1 = first one is smaller
1 = first is larger
*/
int compare(int i, int j, int x, int y) {//0(logn)
    int lc = lcp(i, j, x, y);
    int len1 = j-i+1,len2 = y-x+1;
    if(len1 == len2 and lc == lc) return 0;//equal
    else if(lc == len1) return -1;
    else if(lc == len2) return 1;
    else return (s[i+lc] < s[x+lc] ? -1 : 1);
}
int32_t main() { 
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    string a,b;
    cin >> a >> b;
    int n = a.size();
    int m = b.size();
    prec();
    build(a);
    pair<int,int>b_hash_value = string_hash(b);
    int ans = 0;
    for(int i = 0; i + m -1<n; i++) {
       if(get_hash(i,i+m-1) == b_hash_value) {
        ans++;
       }
    }
    cout << ans <<"\n";
    return 0; 
}
